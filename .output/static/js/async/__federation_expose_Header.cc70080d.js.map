{"version":3,"file":"static/js/async/__federation_expose_Header.cc70080d.js","sources":["webpack://remoteDesignSystem/./src/components/navigation/Header.module.scss","webpack://remoteDesignSystem/./src/components/navigation/Nav.module.scss","webpack://remoteDesignSystem/./src/components/navigation/Header.tsx","webpack://remoteDesignSystem/./src/components/navigation/Nav.tsx"],"sourcesContent":["// extracted by css-extract-rspack-plugin\nexport default {\"header\":\"header-eRyNIn\",\"homeLink\":\"homeLink-xsujwO\"};","// extracted by css-extract-rspack-plugin\nexport default {\"nav\":\"nav-IXFx__\",\"navList\":\"navList-OF43sI\",\"navItem\":\"navItem-gXZQ26\",\"linkGrid\":\"linkGrid-bV_UKj\",\"navLink\":\"navLink-tkp5s2\",\"dropdownToggle\":\"dropdownToggle-mHz1XO\",\"subMenu\":\"subMenu-RnA_20\",\"subMenuLink\":\"subMenuLink-Cfhea4\"};","import Nav from '@components/navigation/Nav';\nimport classes from './Header.module.scss';\nimport type { NavLink } from './types';\n\ninterface HeaderProps {\n    homeLink: string;\n    logoAltText: string;\n    logoSrc: string;\n    navLinks: NavLink[];\n}\n\nconst Header: React.FC<HeaderProps> = ({ homeLink, logoAltText, logoSrc, navLinks }) => {\n    return (\n        <header className={classes.header}>\n            <a href={homeLink} className={classes.homeLink}>\n                <img src={logoSrc} alt={logoAltText} />\n            </a>\n            <Nav links={navLinks} />\n        </header>\n    );\n};\n\nexport default Header;\n","import { DropdownChevron } from '@components/Icon';\nimport { useState } from 'react';\nimport classes from './Nav.module.scss';\nimport type { NavLink } from './types';\n\ntype NavigationProps = {\n    links: NavLink[];\n};\n\nconst Nav = ({ links }: NavigationProps) => {\n    return (\n        <nav className={classes.nav} aria-label=\"Main Navigation\">\n            <ul className={classes.navList}>\n                {links.map(link => (\n                    <NavItem key={link.label} link={link} />\n                ))}\n            </ul>\n        </nav>\n    );\n};\n\nconst NavItem = ({ link }: { link: NavLink }) => {\n    const [isOpen, setIsOpen] = useState(false);\n    const [isHovered, setIsHovered] = useState(false);\n\n    const handleKeyDown = (e: React.KeyboardEvent) => {\n        if (e.key === 'Enter' || e.key === ' ') {\n            e.preventDefault();\n            setIsOpen(!isOpen);\n        }\n    };\n\n    return (\n        <li\n            className={classes.navItem}\n            onMouseEnter={() => setIsHovered(true)}\n            onMouseLeave={() => setIsHovered(false)}\n        >\n            <a href={link.href} className={classes.navLink}>\n                <div className={classes.linkGrid}>\n                    <span>{link.label}</span>\n                    {link.subMenu && (\n                        <button\n                            aria-expanded={isOpen}\n                            aria-haspopup=\"true\"\n                            className={classes.dropdownToggle}\n                            onClick={() => setIsOpen(!isOpen)}\n                            onKeyDown={handleKeyDown}\n                            type=\"button\"\n                        >\n                            <span aria-hidden=\"true\">\n                                <DropdownChevron\n                                    fill={isHovered ? 'var(--nav-link-hover-color)' : 'var(--nav-link-color)'}\n                                />\n                            </span>\n                        </button>\n                    )}\n                </div>\n            </a>\n\n            {link.subMenu && isOpen && (\n                <ul className={classes.subMenu}>\n                    {link.subMenu.map(subLink => (\n                        <li key={subLink.label}>\n                            <a href={subLink.href} className={classes.subMenuLink}>\n                                {subLink.label}\n                            </a>\n                        </li>\n                    ))}\n                </ul>\n            )}\n        </li>\n    );\n};\n\nexport default Nav;\n"],"names":["homeLink","logoAltText","logoSrc","navLinks","classes","Nav","NavItem","link","isOpen","setIsOpen","useState","isHovered","setIsHovered","e","DropdownChevron","subLink","links"],"mappings":"mHACA,IAAe,CAAC,OAAS,gBAAgB,SAAW,iBAAiB,C,sBCArE,IAAe,CAAC,IAAM,aAAa,QAAU,iBAAiB,QAAU,iBAAiB,SAAW,kBAAkB,QAAU,iBAAiB,eAAiB,wBAAwB,QAAU,iBAAiB,YAAc,oBAAoB,C,mECqBvP,WAXsC,AAAC,I,GAAA,CAAEA,SAAAA,CAAQ,CAAEC,YAAAA,CAAW,CAAEC,QAAAA,CAAO,CAAEC,SAAAA,CAAQ,CAAE,GAC/E,MACI,WAAC,UAAO,UAAWC,EAAAA,CAAAA,CAAAA,MAAc,C,UAC7B,UAAC,KAAE,KAAMJ,EAAU,UAAWI,EAAAA,CAAAA,CAAAA,QAAgB,C,SAC1C,UAAC,OAAI,IAAKF,EAAS,IAAKD,C,KAE5B,UAACI,EAAAA,CAAGA,CAAAA,CAAC,MAAOF,C,KAGxB,C,wECCMG,EAAU,AAAC,I,GAAA,CAAEC,KAAAA,CAAI,CAAqB,GAClC,CAACC,EAAQC,EAAU,CAAGC,AAAAA,GAAAA,EAAAA,QAAAA,AAAAA,EAAS,IAC/B,CAACC,EAAWC,EAAa,CAAGF,AAAAA,GAAAA,EAAAA,QAAAA,AAAAA,EAAS,IAS3C,MACI,WAAC,MACG,UAAWN,EAAAA,CAAAA,CAAAA,OAAe,CAC1B,aAAc,IAAMQ,EAAa,IACjC,aAAc,IAAMA,EAAa,I,UAEjC,UAAC,KAAE,KAAML,EAAK,IAAI,CAAE,UAAWH,EAAAA,CAAAA,CAAAA,OAAe,C,SAC1C,WAAC,OAAI,UAAWA,EAAAA,CAAAA,CAAAA,QAAgB,C,UAC5B,UAAC,Q,SAAMG,EAAK,KAAK,A,GAChBA,EAAK,OAAO,EACT,UAAC,UACG,gBAAeC,EACf,gBAAc,OACd,UAAWJ,EAAAA,CAAAA,CAAAA,cAAsB,CACjC,QAAS,IAAMK,EAAU,CAACD,GAC1B,UAtBF,AAACK,IACfA,CAAAA,AAAU,UAAVA,EAAE,GAAG,EAAgBA,AAAU,MAAVA,EAAE,GAAG,AAAO,IACjCA,EAAE,cAAc,GAChBJ,EAAU,CAACD,GAEnB,EAkBwB,KAAK,S,SAEL,UAAC,QAAK,cAAY,O,SACd,UAACM,EAAAA,eAAeA,CAAAA,CACZ,KAAMH,EAAY,8BAAgC,uB,YAQzEJ,EAAK,OAAO,EAAIC,GACb,UAAC,MAAG,UAAWJ,EAAAA,CAAAA,CAAAA,OAAe,C,SACzBG,EAAK,OAAO,CAAC,GAAG,CAACQ,AAAAA,GACd,UAAC,M,SACG,UAAC,KAAE,KAAMA,EAAQ,IAAI,CAAE,UAAWX,EAAAA,CAAAA,CAAAA,WAAmB,C,SAChDW,EAAQ,KAAK,A,IAFbA,EAAQ,KAAK,E,KAU9C,CAEA,KAlEY,AAAC,I,GAAA,CAAEC,MAAAA,CAAK,CAAmB,GACnC,MACI,UAAC,OAAI,UAAWZ,EAAAA,CAAAA,CAAAA,GAAW,CAAE,aAAW,kB,SACpC,UAAC,MAAG,UAAWA,EAAAA,CAAAA,CAAAA,OAAe,C,SACzBY,EAAM,GAAG,CAACT,AAAAA,GACP,UAACD,EAAAA,CAAyB,KAAMC,C,EAAlBA,EAAK,KAAK,E,IAK5C,C"}